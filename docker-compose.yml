# =============================================================================
# Docker Compose for Quizzical AI Local Development
# =============================================================================
# To run:   docker compose up --build
# To stop:  docker compose down
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # Frontend Service (React Application with Nginx)
  # ---------------------------------------------------------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: quizzical-frontend
    env_file:
      - ./.env              # global defaults
      - ./frontend/.env     # frontend-specific overrides
    ports:
      - "3000:80"           # Host 3000 -> Container 80
    depends_on:
      - backend
    networks:
      - quizzical-network

  # ---------------------------------------------------------------------------
  # Backend Service (FastAPI Application)
  # ---------------------------------------------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quizzical-backend
    env_file:
      - ./.env              # global defaults
      - ./backend/.env      # backend-specific overrides (wins if conflicts)
    environment:
      # Force container-internal hosts for service discovery
      DATABASE__HOST: db
      REDIS__HOST: redis
      
            # --- profile & levels ---
            # --- profile & levels ---
      APP_ENVIRONMENT: local
      LOG_PROFILE: perf                 # perf keeps logs tiny; use trace to debug everything
      LOG_LEVEL_ROOT: INFO
      LOG_LEVEL_APP: INFO
      LOG_LEVEL_LIBS: WARNING

      # --- whitelist (perf mode) ---
      LOG_ALLOWED_LOGGERS: logging_config
      # New event names used by logging_config.py
      LOG_ALLOWED_EVENTS: >
        logging_configured,
        llm.call.start,llm.call.done,llm.call.slow,llm.call.error,
        llm.stream.start,llm.stream.done,llm.stream.error,
        llm.responses.parse_err,llm.responses.validation_err,
        llm.invoke_structured.ok,llm.invoke_structured.fail
      # Narrow if you want fewer app logs (optional). Leave as "app." to keep broad app logs.
      LOG_ALLOWED_LOGGER_PREFIXES: app.

      # --- sampling (perf mode; optional but recommended) ---
      # Keep most events but sample high-frequency ones.
      LOG_SAMPLE_DEFAULT: "1.0"         # default keep-rate for allowed events; 1.0 = keep all
      LOG_SAMPLE_EVENTS: >
        llm.call.start=0.1,
        llm.call.done=0.1,
        llm.stream.start=0.1,
        llm.stream.done=0.1,
        llm.invoke_structured.ok=0.2,
        llm.call.slow=1.0,
        llm.call.error=1.0,
        llm.stream.error=1.0,
        llm.responses.parse_err=1.0,
        llm.responses.validation_err=1.0,
        llm.invoke_structured.fail=1.0

      # --- slow thresholds (optional) ---
      LLM_SLOW_MS: "2000"               # mark LLM calls slower than 2s as "llm.call.slow"

      # --- SDK toggles (unchanged) ---
      OPENAI_LOG: info
      LITELLM_LOG: WARNING
      LITELLM_DEBUG: "0"
      LITELLM_DISABLE_BACKGROUND_WORKER: "1"

    volumes:
      - ./backend:/app      # hot reload/dev
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - quizzical-network

  # ---------------------------------------------------------------------------
  # Database Service (PostgreSQL with pgvector)
  # ---------------------------------------------------------------------------
  db:
    image: pgvector/pgvector:0.8.0-pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: quiz
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d:ro
    networks:
      - quizzical-network

  # ---------------------------------------------------------------------------
  # Cache Service (Redis with JSON + Search in Redis 8+)
  # ---------------------------------------------------------------------------
  redis:
    image: redis:8-alpine
    # If you must stay on 7.x with modules bundled, use:
    # image: redis/redis-stack:7.4.2
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Bind to loopback to avoid exposing Redis broadly on the host
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - quizzical-network
    # Optional (dev-only) performance tweak: disable persistence
    # command: ["redis-server", "--save", "", "--appendonly", "no"]

# =============================================================================
# Networks
# =============================================================================
networks:
  quizzical-network:
    driver: bridge

# =============================================================================
# Named Volumes
# =============================================================================
volumes:
  pgdata:
