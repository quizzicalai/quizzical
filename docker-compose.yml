# =============================================================================
# Docker Compose for Quizzical AI Local Development
# =============================================================================
# To run:   docker compose up --build
# To stop:  docker compose down
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # Frontend Service (React Application with Nginx)
  # ---------------------------------------------------------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: quizzical-frontend
    env_file:
      - ./.env              # global defaults
      - ./frontend/.env     # frontend-specific overrides
    ports:
      - "3000:80"           # Host 3000 -> Container 80
    depends_on:
      - backend
    networks:
      - quizzical-network

  # ---------------------------------------------------------------------------
  # Backend Service (FastAPI Application)
  # ---------------------------------------------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quizzical-backend
    env_file:
      - ./.env              # global defaults
      - ./backend/.env      # backend-specific overrides (wins if conflicts)
    environment:
      # Force container-internal hosts for service discovery
      DATABASE__HOST: db
      REDIS__HOST: redis
      
            # --- profile & levels ---
            # --- profile & levels ---
      APP_ENVIRONMENT: local
      LOG_PROFILE: trace          # disables whitelist/sampling; shows everything
      LOG_LEVEL_ROOT: DEBUG
      LOG_LEVEL_APP: DEBUG
      LOG_LEVEL_LIBS: DEBUG       # httpx/openai/litellm debug, incl. HTTP traces

      # LiteLLM / OpenAI SDK verbosity
      OPENAI_LOG: debug           # SDK request/response debug
      LITELLM_LOG: DEBUG
      LITELLM_DEBUG: "1"

      # Helpful toggles used by llm_service
      LITELLM_VERBOSE: "1"        # picked up by llm_service at import
      ENABLE_JSON_SCHEMA_VALIDATION: "1"

    volumes:
      - ./backend:/app      # hot reload/dev
      - ./logs:/logs 
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - quizzical-network

  # ---------------------------------------------------------------------------
  # Database Service (PostgreSQL with pgvector)
  # ---------------------------------------------------------------------------
  db:
    image: pgvector/pgvector:0.8.0-pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: quiz
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d:ro
    networks:
      - quizzical-network

  # ---------------------------------------------------------------------------
  # Cache Service (Redis with JSON + Search in Redis 8+)
  # ---------------------------------------------------------------------------
  redis:
    image: redis:8-alpine
    # If you must stay on 7.x with modules bundled, use:
    # image: redis/redis-stack:7.4.2
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Bind to loopback to avoid exposing Redis broadly on the host
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - quizzical-network
    # Optional (dev-only) performance tweak: disable persistence
    # command: ["redis-server", "--save", "", "--appendonly", "no"]

# =============================================================================
# Networks
# =============================================================================
networks:
  quizzical-network:
    driver: bridge

# =============================================================================
# Named Volumes
# =============================================================================
volumes:
  pgdata:
